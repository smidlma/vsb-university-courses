# Uloha 1
# a
pbinom(0,20,0.15,F)
20*0.15
pnbinom(6,1,0.15)
plot(x,y)
x = seq(0,2400,0.01)
y = pexp(x, 1/800)
plot(x,y)
x = seq(0,4800,0.01)
y = pexp(x, 1/800)
plot(x,y)
x = seq(0,4800,0.01)
y = pexp(x, 1/800)
plot(x,y)
x = seq(0,3600,0.01)
y = pexp(x, 1/800)
plot(x,y)
x = seq(0,3600,0.01)
y = pexp(x, 1/800)
plot(x,y)
x = seq(0,3600,0.01)
y = pexp(x, 1/800)
plot(x,y)
x = seq(0,2400,0.01)
y = pexp(x, 1/800)
plot(x,y)
x = seq(0,2400,0.01)
y = pexp(x, 1/30)
plot(x,y)
x = seq(0,2400,0.01)
y = pexp(x, 1/30)
plot(x,y)
x = seq(0,2400,0.01)
y = pexp(x, 1/800)
plot(x,y)
2^2
2^3
sqrt(1/800^2)
1/(1/800^2)
sqrt(1/(1/800^2))
x = seq(0, 800 + 3*800, 0.01)
y = dexp(x,1/800)
plot(x,y)
x = seq(0 - 3*800, 800 + 3*800, 0.01)
y = dexp(x,1/800)
plot(x,y)
x = seq(0, 800 + 3*800, 0.01)
y = dexp(x,1/800)
plot(x,y)
x = seq(0, 24 + 3*24, 0.01)
y = dexp(x,1/24)
plot(x,y)
x = seq(0, 12 + 3*12, 0.01)
y = dexp(x,1/12)
plot(x,y)
x = seq(800, 800 + 3*800, 0.1)
y = dexp(x,1/800)
plot(x,y)
x = seq(800, 800 + 3*800, 0.01)
y = dexp(x,1/800)
plot(x,y)
x = seq(0,2400,0.01)
y = pexp(x, 1/800)
plot(x,y)
x = seq(0, 800 + 3*800, 0.01)
y = dexp(x,1/800)
plot(x,y)
x = seq(0,2400,0.01)
y = pexp(x, 1/800)
plot(x,y)
x = seq(0,2400,0.01)
y = pexp(x, 1/800)
plot(x,y)
y = dexp(x,1/800)
plot(x,y)
x = seq(-2400,2400,0.01)
y = dexp(x,1/800)
plot(x,y)
x = seq(0,2400,0.01)
y = pexp(x, 1/800)
plot(x,y)
y = dexp(x,1/800)
plot(x,y)
pexp(900, 1/800, F)
qexp(0.75,1/800)
pnbinom(6,1,0.15,F)
pnbinom(6,1,0.15,F)
pnbinom(6,1,0.15, lower.tail = F)
1 - pnbinom(7,1,0.15)
1 - pnbinom(6,1,0.15)
x = seq(0,6000,0.01)
y = pexp(x, 1/800)
plot(x,y)
sqrt(1/((1/800^)2))
(1/800)^2
sqrt(1/a)
a = (1/800)^2
sqrt(1/a)
x = seq(0,2400,0.01)
y = pexp(x, 1/800)
plot(x,y)
x = seq(0,800+2400,0.01)
y = pexp(x, 1/800)
plot(x,y)
x = seq(0,6000,0.01)
y = pexp(x, 1/800)
plot(x,y)
qexp(0.75,1/800)
setwd("~/University/ing/ps/statistics/du1")
setwd("~/University/ing/ps/statistics")
library(readxl)
library(dplyr)
library(ggplot2)
library(moments)
library(rstatix)
data = read_excel("data_hraci.xlsx")
#* a) ####
data1a =
data %>%
filter(system %in% c("WIN", "Linux"))
# Odlehlá pozorování a jejich odstranění
boxplot(data1a$odehrane_hod_2018 ~ data1a$system)
outliers =
data1a %>%
group_by(system) %>%
identify_outliers(odehrane_hod_2018)
outliers
data1a =
data1a %>%
mutate(odehrane_hod_2018_out = ifelse(IDhrace %in% outliers$IDhrace,
NA,
odehrane_hod_2018))
boxplot(data1a$odehrane_hod_2018_out ~ data1a$system)
# Analýza předpokladů - normalita
ggplot(data1a,
aes(x = odehrane_hod_2018_out))+
geom_histogram(bins = 10)+
facet_wrap("system",
ncol = 1)
ggplot(data1a,
aes(sample = odehrane_hod_2018_out))+
stat_qq()+
stat_qq_line()+
facet_wrap("system",
scales = "free")
tapply(data1a$odehrane_hod_2018_out,
data1a$system,
moments::skewness, na.rm =T)
tapply(data1a$odehrane_hod_2018_out,
data1a$system,
moments::kurtosis, na.rm =T)-3
tapply(data1a$odehrane_hod_2018_out,
data1a$system,
shapiro.test)
# Empiricky - poměr výběrových rozptylů (větší ku menšímu) < 2 ?
tapply(data1a$odehrane_hod_2018_out,
data1a$system,
var, na.rm =T)
# Exaktně! Test o shodě rozptylů - F-test
# Touto strukturou se hůře hlídá "co k čemu" se vztahuje - pokud potřebuji i IO, pak rozhodně nedoporučuji
# Pokud potřebuji jen p-hodnotu, tak klidně
var.test(data1a$odehrane_hod_2018_out ~ data1a$system)
# Srovnejte!
var.test(data1a$odehrane_hod_2018_out ~ data1a$system)
var.test(data1a$odehrane_hod_2018_out[data1a$system == "WIN"],
data1a$odehrane_hod_2018_out[data1a$system == "Linux"])
var.test(data1a$odehrane_hod_2018_out[data1a$system == "Linux"],
data1a$odehrane_hod_2018_out[data1a$system == "WIN"])
# Empiricky - poměr výběrových rozptylů (větší ku menšímu) < 2 ?
tapply(data1a$odehrane_hod_2018_out,
data1a$system,
var, na.rm =T)
# Exaktně! Test o shodě rozptylů - F-test
# Touto strukturou se hůře hlídá "co k čemu" se vztahuje - pokud potřebuji i IO, pak rozhodně nedoporučuji
# Pokud potřebuji jen p-hodnotu, tak klidně
var.test(data1a$odehrane_hod_2018_out ~ data1a$system)
# Srovnejte!
var.test(data1a$odehrane_hod_2018_out ~ data1a$system)
var.test(data1a$odehrane_hod_2018_out[data1a$system == "WIN"],
data1a$odehrane_hod_2018_out[data1a$system == "Linux"])
var.test(data1a$odehrane_hod_2018_out[data1a$system == "Linux"],
data1a$odehrane_hod_2018_out[data1a$system == "WIN"])
# Aspinové-Welchův test (H0: mu_W = mu_L, HA: mu_W !=  mu_L) odpovídá (H0: mu_W - mu_L = 0, HA: mu_W - mu_L != 0)
t.test(data1a$odehrane_hod_2018_out[data1a$system=="WIN"],
data1a$odehrane_hod_2018_out[data1a$system=="Linux"],
alternative = "two.sided",
var.equal = FALSE,     # shoda rozptylů KO
conf.level = 0.95)
#* b) ####
data1b =
data %>%
filter(system %in% c("OSX", "Linux"))
# Odlehlá pozorování a jejich odstranění
boxplot(data1b$odehrane_hod_2018 ~ data1b$system)
outliers =
data1b %>%
group_by(system) %>%
identify_outliers(odehrane_hod_2018)
outliers
data1b =
data1b %>%
mutate(odehrane_hod_2018_out = ifelse(IDhrace %in% outliers$IDhrace,
NA,
odehrane_hod_2018))
boxplot(data1b$odehrane_hod_2018_out ~ data1b$system)
# Analýza předpokladů - normalita
ggplot(data1b,
aes(x = odehrane_hod_2018_out))+
geom_histogram(bins = 10)+
facet_wrap("system",
ncol = 1)
ggplot(data1b,
aes(sample = odehrane_hod_2018_out))+
stat_qq()+
stat_qq_line()+
facet_wrap("system", scales = "free")
tapply(data1b$odehrane_hod_2018_out,
data1b$system,
moments::skewness, na.rm =T)
tapply(data1b$odehrane_hod_2018_out,
data1b$system,
moments::kurtosis, na.rm =T)-3
tapply(data1b$odehrane_hod_2018_out,
data1b$system,
shapiro.test)
# Empiricky - poměr výběrových rozptylů (větší ku menšímu) < 2 ?
tapply(data1b$odehrane_hod_2018_out,
data1b$system,
var, na.rm =T)
# Exaktně! Test o shodě rozptylů - F-test
# Touto strukturou se hůře hlídá "co k čemu" se vztahuje - pokud potřebuji i IO, pak rozhodně nedoporučuji
# Pokud potřebuji jen p-hodnotu, tak klidně
var.test(data1b$odehrane_hod_2018_out ~ data1b$system)
# lépe - kontrolovaně
var.test(data1b$odehrane_hod_2018_out[data1b$system == "OSX"],
data1b$odehrane_hod_2018_out[data1b$system == "Linux"])
# Exaktně! Test o shodě rozptylů - F-test
# Touto strukturou se hůře hlídá "co k čemu" se vztahuje - pokud potřebuji i IO, pak rozhodně nedoporučuji
# Pokud potřebuji jen p-hodnotu, tak klidně
var.test(data1b$odehrane_hod_2018_out ~ data1b$system)
ggplot(data1b,
aes(sample = odehrane_hod_2018_out))+
stat_qq()+
stat_qq_line()+
facet_wrap("system", scales = "free")
tapply(data1b$odehrane_hod_2018_out,
data1b$system,
moments::skewness, na.rm =T)
tapply(data1b$odehrane_hod_2018_out,
data1b$system,
moments::kurtosis, na.rm =T)-3
tapply(data1b$odehrane_hod_2018_out,
data1b$system,
shapiro.test)
# Empiricky - poměr výběrových rozptylů (větší ku menšímu) < 2 ?
tapply(data1b$odehrane_hod_2018_out,
data1b$system,
var, na.rm =T)
# Exaktně! Test o shodě rozptylů - F-test
# Touto strukturou se hůře hlídá "co k čemu" se vztahuje - pokud potřebuji i IO, pak rozhodně nedoporučuji
# Pokud potřebuji jen p-hodnotu, tak klidně
var.test(data1b$odehrane_hod_2018_out ~ data1b$system)
# lépe - kontrolovaně
var.test(data1b$odehrane_hod_2018_out[data1b$system == "OSX"],
data1b$odehrane_hod_2018_out[data1b$system == "Linux"])
# Dvouvýběrový t-test (H0: mu_L = mu_O, HA: mu_L >  mu_O) odpovídá (H0: mu_L - mu_O = 0, HA: mu_L - mu_O > 0)
t.test(data1b$odehrane_hod_2018_out[data1b$system=="Linux"],
data1b$odehrane_hod_2018_out[data1b$system=="OSX"],
alternative = "greater",
var.equal = TRUE,     # shoda rozptylů OK
conf.level = 0.95)
#* c) ####
data1c =
data %>%
filter(system %in% c("OSX", "Linux"))
# Odlehlá pozorování
boxplot(data1c$odehrane_hod_2019 ~ data1c$system)
data1c %>%
group_by(system) %>%
identify_outliers(odehrane_hod_2019)
# Analýza předpokladů - normalita
ggplot(data1c,
aes(x = odehrane_hod_2019))+
geom_histogram(bins = 10)+
facet_wrap("system",
ncol = 1)
ggplot(data1c,
aes(sample = odehrane_hod_2019))+
stat_qq()+
stat_qq_line()+
facet_wrap("system",
scales = "free")
tapply(data1c$odehrane_hod_2019,
data1c$system,
moments::skewness, na.rm =T)
# Analýza předpokladů - normalita
ggplot(data1c,
aes(x = odehrane_hod_2019))+
geom_histogram(bins = 10)+
facet_wrap("system",
ncol = 1)
ggplot(data1c,
aes(sample = odehrane_hod_2019))+
stat_qq()+
stat_qq_line()+
facet_wrap("system",
scales = "free")
tapply(data1c$odehrane_hod_2019,
data1c$system,
moments::skewness, na.rm =T)
tapply(data1c$odehrane_hod_2019,
data1c$system,
moments::kurtosis, na.rm =T)-3
tapply(data1c$odehrane_hod_2019,
data1c$system,
shapiro.test)
# Kvůli přehlednosti je zde medián značen jen symbolicky x (aby byl odlišitelný od stř. hodnoty mu)
# Mannův-Whitneyho test (H0: x_L = x_O, HA: x_L >  x_O) odpovídá (H0: x_L - x_O = 0, HA: x_L - x_O > 0)
wilcox.test(data1c$odehrane_hod_2019[data1c$system=="Linux"],
data1c$odehrane_hod_2019[data1c$system=="OSX"],
alternative = "greater",
conf.level = 0.95,
conf.int = T)
tapply(data1c$odehrane_hod_2019,
data1c$system,
shapiro.test)
# Kvůli přehlednosti je zde medián značen jen symbolicky x (aby byl odlišitelný od stř. hodnoty mu)
# Mannův-Whitneyho test (H0: x_L = x_O, HA: x_L >  x_O) odpovídá (H0: x_L - x_O = 0, HA: x_L - x_O > 0)
wilcox.test(data1c$odehrane_hod_2019[data1c$system=="Linux"],
data1c$odehrane_hod_2019[data1c$system=="OSX"],
alternative = "greater",
conf.level = 0.95,
conf.int = T)
tapply(data1c$odehrane_hod_2019, data1c$system, quantile, 0.5)
326.5 - 315
data %>%
group_by(system) %>%
summarise(rozsah = length(na.omit(odehrane_hod_2018)),
sikmost = moments::skewness(odehrane_hod_2018, na.rm = T),
spicatost = moments::kurtosis(odehrane_hod_2018, na.rm = T)-3,
rozptyl = var(odehrane_hod_2018, na.rm = T),
sm_odch = sd(odehrane_hod_2018, na.rm = T),
prumer = mean(odehrane_hod_2018, na.rm = T),
median = quantile(odehrane_hod_2018, 0.5, na.rm = T),
Shapiruv_Wilkuv_phodnota = shapiro.test(odehrane_hod_2018)$p.value)
data3 =
data %>%
filter(system %in% c("WIN", "Linux"))
# Definování dichotomické proměnné
data3$hodiny_dich_2018 = ifelse(data3$odehrane_hod_2018>280, "Ano", "Ne")
# Získání potřebných četností
table(data3$system, data3$hodiny_dich_2018)
# Linux
n_L = 42+16
x_L = 42
p_L = x_L/n_L
# Windows
n_W = 132+70
x_W = 132
p_W = x_W/n_W
# Ověření předpokladů
n_L > 9/(p_L*(1-p_L))
n_W > 9/(p_W*(1-p_W))
# Test shody parametrů dvou binomických rozdělení
# (H0: pi_W = pi_L, HA: pi_W > pi_L) odpovídá (H0: pi_W - pi_L = 0, HA: pi_W - pi_L > 0)
prop.test(c(x_W, x_L),
c(n_W,n_L),
alternative = "greater",
conf.level = 0.85)
